// Generated by CoffeeScript 1.8.0
(function() {
  var CUKEY, CUS, Extends, MEKEY, OPKEY, OPS, OPTS, SYS, afterSYS, check, checkAll, extend, formatSysKey, getMethod, isArray, isCustomHandlerKey, isEmpty, isFunction, isObject, isString, isSysKey, isUndefined, parse, result, validator, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  validator = require('validator');

  _ = require('lodash');

  isString = _.isString, isArray = _.isArray, isObject = _.isObject, isUndefined = _.isUndefined, isFunction = _.isFunction;

  OPS = '$in,$eq,$neq'.split(',');

  SYS = '$or,$and'.split(',');

  CUS = '$required,$empty'.split(',');

  OPKEY = 'op';

  CUKEY = 'cu';

  MEKEY = 'me';

  Extends = {};

  OPTS = {
    format: false
  };

  Extends[OPKEY] = {
    $in: function(target, arr) {
      return __indexOf.call(arr, target) >= 0;
    },
    $eq: _.isEqual,
    $neq: function() {
      return !_.isEqual.apply(_, arguments);
    }
  };

  Extends[CUKEY] = {
    $required: function(target, required) {
      if (required && isUndefined(target)) {
        return false;
      } else if (!required && isUndefined(target)) {
        return 'passed';
      } else {
        return true;
      }
    },
    $empty: function(target, empty) {
      if (!empty && isEmpty(target)) {
        return false;
      } else if (empty && isEmpty(target)) {
        return 'passed';
      } else {
        return true;
      }
    }
  };

  Extends[MEKEY] = {
    $type: function(target, type) {
      return getMethod(type)(target);
    }
  };

  extend = function(type) {
    var _extend;
    _extend = function(handler, name) {
      if (type !== MEKEY && !/^\$/.test(name)) {
        return false;
      }
      if (Extends[type][name]) {
        console.warn("key " + name + " is already existed");
      }
      Extends[type][name] = handler;
      if (type === OPKEY) {
        OPS.push(name);
      } else if (type === CUKEY) {
        CUS.push(name);
      }
      return name;
    };
    return function(name, handler) {
      if (isObject(name)) {
        return _.mapKeys(name, _extend);
      } else {
        return _extend(handler, name);
      }
    };
  };

  isEmpty = function(obj) {
    if (isArray(obj) && obj.length === 0) {
      return true;
    }
    if (isObject(obj) && _.keys(obj).length === 0) {
      return true;
    }
    if (obj === '') {
      return true;
    }
    return false;
  };

  afterSYS = function(path) {
    return isSysKey(_.last(path));
  };

  isSysKey = function(key) {
    return /^\$(and|or)/.test(key);
  };

  isCustomHandlerKey = function(key) {
    return /^\$FN/.test(key);
  };

  formatSysKey = function(key) {
    if (/^\$or/.test(key)) {
      return 'or';
    } else {
      return 'and';
    }
  };

  getMethod = function(name) {
    var extendFn;
    extendFn = Extends[MEKEY][name];
    if (extendFn) {
      return extendFn;
    } else {
      return validator[name];
    }
  };

  result = function(obj, path) {
    var curriedResult, max, pis, rt;
    if (!(obj && path)) {
      return obj;
    }
    if (~path.indexOf('$array')) {
      pis = path.split(/^\$array\.|\.\$array\.|\.\$array$/);
      rt = obj;
      curriedResult = _.curryRight(_.result)(void 0);
      max = pis.length - 1;
      pis.forEach(function(p, ind) {
        if (p === '' && ind === max) {
          return rt = [].concat.apply([], rt);
        } else {
          if (isArray(rt)) {
            rt = _.map(rt, function(r) {
              return curriedResult(p)(r);
            });
            if (ind < max) {
              return rt = [].concat.apply([], rt);
            }
          } else if (isObject(rt)) {
            return rt = _.result(rt, p);
          }
        }
      });
      return rt;
    } else {
      return _.result(obj, path);
    }
  };

  parse = function(obj) {
    var andCount, data, getKey, orCount, rt, rules, _format, _parse, _toRule;
    if (isObject(obj)) {
      data = obj;
    } else if (isArray(obj)) {
      return obj.map(function(d) {
        return parse(d);
      });
    } else {
      return null;
    }
    orCount = 1;
    andCount = 1;
    getKey = function(type) {
      if (type === 'or') {
        return "$or" + (orCount++);
      } else {
        return "$and" + (andCount++);
      }
    };
    rt = [];
    _parse = function(data, path) {
      var andKey, keys, orKey;
      andKey = getKey('and');
      orKey = getKey('or');
      if (isObject(data)) {
        keys = Object.keys(data);
        return keys.forEach(function(key) {
          if (__indexOf.call(OPS, key) >= 0) {
            return _toRule(data, path, key);
          } else if (__indexOf.call(CUS, key) >= 0) {
            return _parse(data[key], path.concat(key));
          } else if (isSysKey(key)) {
            return _parse(data[key], path.concat(key === '$and' ? andKey : getKey('or')));
          } else {
            if (!afterSYS(path)) {
              path.push(andKey);
            }
            return _parse(data[key], path.concat(key));
          }
        });
      } else if (isArray(data)) {
        return data.forEach(function(item, ind) {
          return _parse(item, path.concat(!afterSYS(path) ? [andKey, ind] : ind));
        });
      } else if (isString(data)) {
        return _toRule(data, path, _.last(path));
      } else if (isFunction(data)) {
        return _toRule(data, path, _.last(path));
      } else {
        return console.log('err', path);
      }
    };
    _toRule = function(data, path, key) {
      var addtions, ps, rule, type;
      rule = {};
      if (__indexOf.call(OPS, key) >= 0) {
        rule.path = path;
        rule.check = [key, data[key]];
      } else if (isString(data)) {
        rule.path = path;
        ps = data.split(':');
        type = ps[0];
        addtions = ps.slice(1);
        rule.check = ['$type', type];
        addtions.forEach(function(addtion) {
          return rule["$" + addtion] = true;
        });
      } else if (isFunction(data)) {
        rule.path = path;
        rule.check = ["$FN:" + key, data];
      } else {
        return;
      }
      return rt.push(rule);
    };
    _format = function(rules) {
      rt = [];
      rules.forEach(function(rule) {
        var check, key, keys, path, sys;
        path = rule.path, check = rule.check;
        CUS.forEach(function(ckey) {
          if (__indexOf.call(path, ckey) >= 0) {
            path = _.without(path, ckey);
            return rule[ckey] = true;
          }
        });
        keys = [];
        sys = [];
        path.forEach(function(p) {
          return (isSysKey(p) ? sys : keys).push(p);
        });
        key = keys.pop();
        if (key === '$array') {
          key = keys.pop();
        }
        rule.key = key;
        rule.path = keys.join('.');
        rule.sys = sys;
        rule.id = _.uniqueId('rule_');
        return rt.push(rule);
      });
      return rt;
    };
    _parse(data, ['$and0']);
    rules = _format(rt);
    return rules;
  };

  checkAll = function(obj, rules) {
    var errArr, errObj, maxLen, queue, rt, rulesById, trackErr, _resolve;
    rt = null;
    queue = [];
    maxLen = 0;
    rulesById = {};
    errArr = null;
    errObj = {};
    trackErr = function(op, res, items) {
      var val;
      val = res ? 0 : 1;
      return items.forEach(function(_arg) {
        var id, ids, rt, sys;
        sys = _arg[0], rt = _arg[1], id = _arg[2];
        if (_.isArray(id)) {
          ids = _.flatten(id, true);
          return ids.forEach(function(id) {
            return errObj[id] = val;
          });
        } else {
          return errObj[id] = val;
        }
      });
    };
    _resolve = function(table, maxLen) {
      var rest, toResolve;
      if (maxLen) {
        toResolve = {};
        rest = table.filter(function(_arg) {
          var id, key, res, sop, sys;
          sys = _arg[0], res = _arg[1], id = _arg[2];
          if (sys.length === maxLen) {
            key = sys.join('.');
            sop = sys.pop();
            (toResolve[key] || (toResolve[key] = [sop])).push([sop, res, id]);
            return false;
          } else {
            return true;
          }
        });
        _.mapKeys(toResolve, function(val, key) {
          var ids, items, op, rts, symbol;
          op = formatSysKey(val[0]);
          items = val.slice(1);
          rts = _.pluck(items, '1');
          ids = _.pluck(items, '2');
          if (op === 'or') {
            symbol = '||';
          } else {
            symbol = '&&';
          }
          rt = eval(rts.join(symbol));
          trackErr(op, rt, items);
          return rest.push([key.split('.').slice(0, -1), rt, ids]);
        });
        maxLen--;
        return _resolve(rest, maxLen);
      } else {
        rt = eval((table.map(function(arr) {
          return arr[1];
        })).join('&&'));
        trackErr('and', rt, table);
        return rt;
      }
    };
    rules.forEach(function(rule) {
      var err, len, res, target, _ref;
      _ref = check(obj, rule), err = _ref[0], res = _ref[1], target = _ref[2];
      queue.push([rule.sys, res, rule.id]);
      rulesById[rule.id] = {
        path: rule.path,
        err: err,
        target: target
      };
      len = rule.sys.length;
      if (len > maxLen) {
        return maxLen = len;
      }
    });
    rt = _resolve(queue, maxLen);
    _.mapKeys(errObj, function(value, key) {
      if (value && rulesById[key].err) {
        errArr || (errArr = []);
        return errArr.push(rulesById[key]);
      }
    });
    return [errArr, rt];
  };

  check = function(obj, rule) {
    var data, empty, err, key, method, op, path, required, rt, tar, target, _check, _i, _len, _ref, _wrap;
    path = rule.path, key = rule.key, required = rule.required, empty = rule.empty;
    _ref = rule.check, op = _ref[0], data = _ref[1];
    target = result(obj, path);
    rt = false;
    err = null;
    if (isCustomHandlerKey(op)) {
      method = data;
    } else if (__indexOf.call(OPS, op) >= 0) {
      method = Extends[OPKEY][op];
    } else {
      method = getMethod(data);
    }
    _wrap = function(target, handler, addtion) {
      var rest, results, single, wrapRt;
      single = false;
      if (!isArray(target)) {
        target = [target];
        single = true;
      }
      rest = [];
      results = _.map(target, function(tar) {
        var r;
        r = handler(tar, addtion);
        if (r !== 'passed') {
          rest.push(tar);
        }
        return r;
      });
      wrapRt = _.reduce(results, function(a, b) {
        return a && b;
      });
      results = single ? results[0] : results;
      return [wrapRt, results, rest];
    };
    _check = function(tar, key) {
      var cusRule, handler, rest, rts, toCheck, _i, _len, _ref1, _ref2;
      toCheck = tar[key];
      if (isEmpty(toCheck)) {
        if (!rule.$empty) {
          err = '$empty';
        }
        return !!rule.$empty;
      }
      for (_i = 0, _len = CUS.length; _i < _len; _i++) {
        cusRule = CUS[_i];
        handler = Extends[CUKEY][cusRule];
        _ref1 = _wrap(toCheck, handler, rule[cusRule]), rt = _ref1[0], rts = _ref1[1], rest = _ref1[2];
        if (!rt) {
          err = cusRule;
          return false;
        }
        if (!rest.length) {
          return true;
        }
        toCheck = rest;
      }
      if (!method) {
        rt = false;
        err = 'Operation';
      } else {
        _ref2 = _wrap(toCheck, method, data), rt = _ref2[0], rts = _ref2[1];
        if (OPTS.format) {
          tar[key] = rts;
        }
        if (!rt) {
          err = [op, data];
        }
      }
      return rt;
    };
    if (isArray(target) && /\$array$/.test(path)) {
      for (_i = 0, _len = target.length; _i < _len; _i++) {
        tar = target[_i];
        rt = _check(tar, key);
        if (err) {
          break;
        }
      }
      if (!err) {
        rt = true;
      }
    } else {
      rt = _check(target, key);
    }
    return [err, !!rt, target[key]];
  };

  module.exports = {
    extendOperation: extend(OPKEY),
    extendAddtion: extend(CUKEY),
    extendMethod: extend(MEKEY),
    checkAll: checkAll,
    parse: parse,
    config: function(opts) {
      return OPTS = _.assign(OPTS, opts);
    },
    type: function(type, target) {
      return Extends[MEKEY].$type(target, type);
    }
  };

  _.assign(module.exports, Extends[OPKEY]);

  _.assign(module.exports, Extends[CUKEY]);

}).call(this);
